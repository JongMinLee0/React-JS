
Arrow Function

1.사용법
// 기존의 Function sample
var double = function(x){
    return x*2;
}

// Arrow function sample
const double = (x) => {
    return x*2;
}

// 매개변수가 1개인 경우 소괄호 생략 가능
const double = x => {return x*2}
// 함수가 한줄로 표현가능하면 중괄호 생략 가능하고 자동으로 return 됨
const double = x => x * 2
// 매개변수가 두 개 이상일 때
const add = (x,y) => x + y
// 매개변수가 없을 때
() => { ...}
// 객체변환할 때 중괄호 사용
() => {return {a:1};}
// return 바로할땐 소괄호 사용
() => ({a:1})

function 키워드 대신 화살표(=>)를 사용하여 함수를 선언할 수 있다.

- Arrow function이 기존의 function을 완전히 대신할 수 없다.
- CallBack function에서 사용하면 아주 간결하게 표현이 가능한 장점이 있다.
함수호출

//const pow = (x) => {return x * x}
const puw = x => x * x;
console.log(pow(10)); // 100

//콜백에 arrow function 사용해서 간략화 시키기
const arr = [1,2,3];
const pow = arr.map(x => x * x);
console.log(pow); // [1, 4, 9]

2. this
function 키워드로 생성한 일반함수와 arrow function의 가장 큰 차이점은 this이다.

2-1 this of normal function
자바스크립트의 경우 함수 호출 방식에 의해 this에 바인딩할 어떤 객체가 동적으로
결정된다. 함수를 선언할 때 this에 바인딩할 객체가 정적으로 결정되는 것이 아니고, 함수를
호출할 때 함수가 어떻게 호출되었는지에 따라 this에 바인딩할 객체가 동적으로 결정된다.

function Prefixer(prefix) {
  this.prefix = prefix;
}

Prefixer.prototype.prefixArray = function (arr) {
  // (A)
  return arr.map(function (x) {
    return this.prefix + ' ' + x; // (B)
  });
};

var pre = new Prefixer('Hi');
console.log(pre.prefixArray(['Lee', 'Kim']));

(A) 지점에서의 this는 생성자 함수 Prefixer가 생성한 객체, 즉 생성자 함수의 인스턴스
(위 예제의 경우 pre)이다.
(B) 지점에서 사용한 this는 아마도 생성자 함수 Prefixer가 생성한 객체일 것으로 기대하엿겠지만,
이곳에서 this는 전역객체 window를 가리킨다. 이는 생성자 함수와 객체의 메소드를 제외한 모든 함수
(내부함수, 콜백함수 포함) 내부의 this는 전역 객체를 가리키기 때문이다.


2-2 Arrow Function
Arrow function은 함수를 선언할 때 this에 바인딩할 객체가 정적으로 결정된다.
동적으로 결정되는 일반 함수와는 달리 화살표 함수의 this는 언제나 상위 스코프의 this를 가리킨다.
이를 Lexical this라 한다.

function Prefixer(prefix) {
  this.prefix = prefix;
}

Prefixer.prototype.prefixArray = function (arr) {
  // this는 상위 스코프인 prefixArray 메소드 내의 this를 가리킨다.
  return arr.map(x => `${this.prefix}  ${x}`);
};

const pre = new Prefixer('Hi');
console.log(pre.prefixArray(['Lee', 'Kim']));

Arrow function은 call, applay, bind 메소드를 사용하여 this를 변경할 수 없다.

window.x = 1;
const normal = function () { return this.x; };
const arrow = () => this.x;

console.log(normal.call({ x: 10 })); // 10
console.log(arrow.call({ x: 10 }));  // 1

3. Arrow function을 사용해서는 안되는 경우

3-1 Method
3-2 prototype
3-3 constructor